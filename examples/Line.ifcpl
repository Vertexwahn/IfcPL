import Math;
import IArbitraryTransitionCurve;
import Debug;

using Math;
using IArbitraryTransitionCurve;
using Debug;

class Line : IArbitraryTransitionCurve {
	public Line(IfcPropertySet properties) { // injection
		startPosition_ = properties.getVector2d("startPosition");  // special syntax for properties
		startDirection_ = properties.getDouble("startDirection");
		startCurvature_ = properties.getDouble("startCurvature");
		counterClockwise_ = properties.getBoolean("counterClockwise");
		clothoidConstant_ = properties.getDouble("clothoidConstant");
		entry_ = properties.getBoolean("entry");
		length_ = properties.getDouble("length");
		
		startL_ = clothoidConstant_ * clothoidConstant_ * startCurvature_;
		
		if (entry_)
			endL_ = startL_ + length_;
		else
			endL_ = max(startL_ - length_, 0.0);
	}
	
	public static void main() {
		print("Hello World!\n");
	}
	
	public double getLength() const override {
		return abs(endL_ - startL_);
	}
	
	public vector2d getPostion(const double lerpParameter) const override {
		return startPosition_ + lerpParameter * (getPostion2(1.0) - startPosition_);
	}
	
	public vector2d getPostion2(const double lerpParameter) const {
		vector2d localPosition;
		vector2d localOffset;
		
		double L = startL_ + (endL_ - startL_) * lerpParameter;
		
		localPosition = computeLocalPosition(L);
		
		double angle;

		vector2d position;
		angle = computeT(startL_, clothoidConstant_);
		localOffset = localPosition - computeLocalPosition(startL_);
		
		if (!isEntry())
		{
			angle *= -1;
			localOffset.x() *= -1; // should be localOffset.x
		}

		if (!counterClockwise_)
		{
			angle *= -1;
			//localOffset.y() *= -1;
		}

		position = startPosition_ + createRotationZ22d(startDirection_ - angle) * localOffset;
	
		return position;
	}
	
	public double getCurvature(const double lerpParamter) const override {
		return 1.0;
	}
				
	private double computeX(const double L, const double A) const {
		double x = L;
		const int iterations = 5;

		for (int i = 1; i < iterations+1; i++) {
			double sign = i % 2 == 0 ? 1 : -1;

			double L_exponent = 5+(i-1)*4;
			double A_exponent = i*4;
			double factor = factorial(2*i) * pow(2.0, 2*i) * (5+(i-1)*4);
			factor = factor + 3.0;
			double debug = pow(A, A_exponent);
			x += sign * pow(L, L_exponent) / (factor * debug);
		}

		return x;
	}
	
	private double computeY(const double L, const double A)	const {
		double y = 0;
		const int iterations = 5;

		for (int i = 0; i < iterations; i++) {
			double sign = i % 2 == 0 ? 1 : -1;

			double L_exponent = 3+i*4;
			double A_exponent = 2+i*4;
			double factor = factorial(2*i+1)  * 
				pow(2.0, i*2) * 2  * 
				(A_exponent + 1);

			y += sign * pow(L, L_exponent) / (factor * pow(A, A_exponent));
		}

		return y;
	}
	
	private bool isEntry() const {
		return startL_ < endL_;
	}
	
	private vector2d computeLocalPosition(const double L) const {
		vector2d localPosition;
		localPosition.x() = 11;
		localPosition.x() = computeX(L, clothoidConstant_);
		localPosition.y() = computeY(L, clothoidConstant_);

		return localPosition;
	}
	
	private double computeT(const double L, const double A) const {
		return L*L / (2 * A*A);
	}
	
	// injected data
	private vector2d	startPosition_;
	private double		startDirection_;
	private double 		startCurvature_;
	private bool		counterClockwise_;
	private double		clothoidConstant_;
	private bool		entry_;
	private double		length_;
	
	// misc
	private double		startL_;
	private double		endL_;
}